name: "Pawn Compiler Action"
description: "Compiles Pawn scripts using open.mp compiler"
branding:
  icon: "code"
  color: "orange"

inputs:
  input:
    description: "Path to .pwn source file"
    required: true
  output:
    description: "Custom output path (optional)"
    required: false
  flags:
    description: "Compiler flags (space separated, e.g. '-;+ -(+ -d3')"
    required: false
    default: ""
  include_path:
    description: "Include paths (space separated, e.g. 'qawno/includes')"
    required: true
  source_url:
    description: "Pawncc source compiler repository (optional, if empty uses prebuilt binary)"
    required: false
    default: ""

outputs:
  compiled_file:
    description: "Path to compiled .amx file"
    value: ${{ steps.compile.outputs.compiled_file }}
  compiler_output:
    description: "Path to compiler output log"
    value: ${{ steps.compile.outputs.compiler_output }}

runs:
  using: "composite"
  steps:
    - name: Install compiler
      id: install
      shell: bash
      run: |
        echo "Installing open.mp pawncc..."
        mkdir -p pawncc
        if [ -z "${{ inputs.source_url }}" ]; then
          # Download prebuilt binary
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/openmultiplayer/compiler/releases/latest | grep "browser_download_url.*pawnc-.*linux.tar.gz" | cut -d '"' -f 4 | head -n 1)
          if [ -z "$LATEST_RELEASE" ]; then
            echo "::error::No prebuilt pawnc binary found in latest release"
            exit 1
          fi
          wget "$LATEST_RELEASE" -O pawnc.tar.gz
          tar -xzf pawnc.tar.gz -C pawncc
          PAWNCC_BINARY=$(find pawncc -type f -name "pawncc" | head -n 1)
          if [ -z "$PAWNCC_BINARY" ]; then
            echo "::error::Failed to extract pawncc binary from tar.gz"
            ls -R pawncc
            exit 1
          fi
          mv "$PAWNCC_BINARY" pawncc/pawncc
        else
          # Install build dependencies
          sudo apt-get update
          sudo apt-get install -y gcc gcc-multilib make cmake
          # Build from source
          git clone --depth 1 ${{ inputs.source_url }} pawn-src
          cd pawn-src
          if [ ! -f source/compiler/CMakeLists.txt ]; then
            echo "::error::CMakeLists.txt not found in source/compiler"
            ls -R
            exit 1
          fi
          mkdir build && cd build
          cmake ../source/compiler -DCMAKE_C_FLAGS=-m32 -DCMAKE_BUILD_TYPE=Release
          make
          cd ../..
          if [ -f "pawn-src/build/pawncc" ]; then
            mv pawn-src/build/pawncc pawncc/
          else
            echo "::error::Compiler binary not found at pawn-src/build/pawncc"
            ls -R pawn-src
            exit 1
          fi
        fi
        PAWNCC_PATH="$(pwd)/pawncc/pawncc"
        if [ -f "$PAWNCC_PATH" ]; then
          chmod +x "$PAWNCC_PATH"
          echo "pawncc=$PAWNCC_PATH" >> $GITHUB_OUTPUT
          echo "Compiler installed at $PAWNCC_PATH"
        else
          echo "::error::Compiler binary not found at $PAWNCC_PATH"
          ls -R pawncc
          exit 1
        fi

- name: Compile Pawn code
  id: compile
  shell: bash
  run: |
    INPUT_DIR=$(dirname "${{ inputs.input }}")
    INPUT_FILE=$(basename "${{ inputs.input }}")
    COMPILE_CMD="${{ steps.install.outputs.pawncc }} ${{ inputs.input }}"
    if [ -n "${{ inputs.output }}" ]; then
      COMPILE_CMD="$COMPILE_CMD -o${{ inputs.output }}"
      OUTPUT_FILE="${{ inputs.output }}"
    else
      COMPILE_CMD="$COMPILE_CMD -D${INPUT_DIR}"
      OUTPUT_FILE="${INPUT_DIR}/${INPUT_FILE%.*}.amx"
    fi
    for path in ${{ inputs.include_path }}; do
      [ -n "$path" ] && COMPILE_CMD="$COMPILE_CMD -i$path"
    done
    for flag in ${{ inputs.flags }}; do
      [ -n "$flag" ] && COMPILE_CMD="$COMPILE_CMD $flag"
    done
    echo "Running: $COMPILE_CMD"
    if ! $COMPILE_CMD > output.pawncc 2>&1; then
      cat output.pawncc  # Display the compiler output on failure
      exit 1
    fi
    echo "compiled_file=$OUTPUT_FILE" >> $GITHUB_OUTPUT
    echo "compiler_output=$(pwd)/output.pawncc" >> $GITHUB_OUTPUT
